{"version":3,"sources":["views/MultilineChart/MultilineChart.js","views/Legend/Legend.js","views/KeyMetrics/KeyMetrics.js","App.js","index.js"],"names":["MultilineChart","_ref","_ref$data","data","_ref$dimensions","dimensions","svgRef","React","useRef","width","height","_dimensions$margin","margin","svgWidth","left","right","svgHeight","top","bottom","useEffect","xScale","d3","domain","map","elem","items","flat","d","x","range","yScale","y","svgEl","current","selectAll","remove","svg","append","attr","concat","xAxis","ticks","tickSize","xAxisGroup","call","select","yAxis","yAxisGroup","line","enter","color","createElement","ref","Legend","className","style","key","name","KeyMetrics","console","log","Object","entries","metrics","_ref2","_ref3","_slicedToArray","metricName","metric","colors","App","useMemo","trajectoires","index","sortedLines","points","sort","a","b","time","id","reduce","acc","curr","currArr","Number","Math","pow","toFixed","Stops","Total time","Average speed","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f8091769.chunk.js","sourcesContent":["import React from \"react\";\nimport * as d3 from \"d3\";\n\nconst MultilineChart = ({ data = [], dimensions = {} }) => {\n  const svgRef = React.useRef(null);\n  const { width, height, margin = {} } = dimensions;\n  const svgWidth = width + margin.left + margin.right;\n  const svgHeight = height + margin.top + margin.bottom;\n\n  React.useEffect(() => {\n    const xScale = d3\n      .scaleLinear()\n      .domain(d3.extent(data.map((elem)=>elem.items).flat(), (d) => d.x))\n      .range([0, width]);\n    const yScale = d3\n      .scaleLinear()\n      .domain([\n        d3.min(data.map((elem)=>elem.items).flat(), (d) => d.y),\n        d3.max(data[0].items, (d) => d.y) + 3\n      ])\n      .range([height, 0]);\n    // Create root container where we will append all other chart elements\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove(); // Clear svg content before adding new elements\n    const svg = svgEl\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n    // Add X grid lines with labels\n    const xAxis = d3\n      .axisBottom(xScale)\n      .ticks(10)\n      .tickSize(-height + margin.bottom);\n    const xAxisGroup = svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n      .call(xAxis);\n    xAxisGroup.select(\".domain\").remove();\n    xAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n    xAxisGroup\n      .selectAll(\"text\")\n      .attr(\"opacity\", 0.5)\n      .attr(\"color\", \"white\")\n      .attr(\"font-size\", \"0.75rem\");\n    // Add Y grid lines with labels\n    const yAxis = d3\n      .axisLeft(yScale)\n      .ticks(5)\n      .tickSize(-width)\n    const yAxisGroup = svg.append(\"g\").call(yAxis);\n    yAxisGroup.select(\".domain\").remove();\n    yAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n    yAxisGroup\n      .selectAll(\"text\")\n      .attr(\"opacity\", 0.5)\n      .attr(\"color\", \"white\")\n      .attr(\"font-size\", \"0.75rem\");\n    // Draw the lines\n    const line = d3\n      .line()\n      .x((d) => xScale(d.x))\n      .y((d) => yScale(d.y));\n\n    svg\n      .selectAll(\".line\")\n      .data(data)\n      .enter()\n      .append(\"path\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", (d) => d.color)\n      .attr(\"stroke-width\", 3)\n      .attr(\"d\", (d) => line(d.items));\n  }, [data]);\n\n  return <svg ref={svgRef} width={svgWidth} height={svgHeight} />;\n};\n\nexport default MultilineChart;\n","import React from \"react\";\r\n\r\nconst Legend = ({ data }) => (\r\n    <div className=\"legendContainer\">\r\n        {data.map((d) => (\r\n            <div className=\"checkbox\" style={{ color: d.color }} key={d.name}>\r\n                <label>{d.name}</label>\r\n            </div>\r\n        ))}\r\n    </div>\r\n);\r\n\r\nexport default Legend;","import React from \"react\";\r\n\r\nexport const KeyMetrics = ({data}) => {\r\n    return <div className='keyMetrics'>\r\n        {data.map((line)=>{\r\n            console.log(line)\r\n            return <div className='keyMetricsBox'>\r\n                {Object.entries(line.metrics).map(([metricName, metric])=><div className='keyMetric' style={{ color: line.color }}>{metricName}: {metric}</div>)}\r\n            </div>\r\n        })}\r\n\r\n    </div>\r\n}","import React, {useMemo} from \"react\";\nimport MultilineChart from \"./views/MultilineChart\";\nimport trajectoires from './trajectoires.json'\nimport \"./styles.css\";\nimport Legend from \"./views/Legend/Legend\";\nimport {KeyMetrics} from \"./views/KeyMetrics/KeyMetrics\";\n\nconst colors = [\"#ffffff\", \"#d53e4f\", \"#5e4fa2\", \"rgba(26, 137, 23, 1)\", \"#32557f\"]\n\nconst dimensions = {\n  width: 1400,\n  height: 600,\n  margin: {\n    top: 30,\n    right: 30,\n    bottom: 30,\n    left: 60\n  }\n};\n\nexport default function App() {\n  const generateData = () => {\n    return trajectoires.map((line, index)=>{\n        const sortedLines = line.points.sort((a,b)=>a.time-b.time)\n        return ({\n            name: line.id,\n            color: colors[index],\n            items: sortedLines,\n            metrics: sortedLines.reduce((acc,curr, index, currArr)=>{\n                acc[\"Average speed\"] += Number(Math.pow(curr.x**2+curr.y**2,1/2).toFixed(2))\n                    acc[\"Total time\"] += curr.time\n                if(!currArr[index+1]) {\n\n                    acc[\"Average speed\"] = (acc[\"Average speed\"] / acc[\"Total time\"]).toFixed(5)\n                } else if(currArr[index+1].x === curr.x && currArr[index+1].y === curr.y) {\n                    acc[\"Stops\"]++\n                }\n                return acc\n            },{\n                \"Stops\": 0,\n                \"Total time\": 0,\n                \"Average speed\": 0\n            })\n        })\n    })\n  }\n\n  const data = useMemo(()=>generateData(),[trajectoires])\n\n  return (\n    <div className=\"App\">\n      <Legend\n          data={data}\n      />\n      <MultilineChart\n        data={data}\n        dimensions={dimensions}\n      />\n      <KeyMetrics\n        data={data}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}